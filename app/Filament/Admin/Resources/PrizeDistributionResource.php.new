<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\PrizeDistributionResource\Pages;
use App\Filament\Admin\Resources\PrizeDistributionResource\RelationManagers;
use App\Models\PrizeDistribution;
use App\Models\Contest;
use App\Models\Prize;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Tables\Grouping\Group;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Str;

class PrizeDistributionResource extends Resource
{
    protected static ?string  = PrizeDistribution::class;

    protected static ?string  = 'heroicon-o-gift';
    
    protected static ?string  = 'Distributions de prix';
    
    protected static ?string  = 'Gestion des concours';

    public static function form(Form ): Form
    {
        // Trouver le concours le plus récent (active ou pas)
         = Contest::orderBy('created_at', 'desc')->first();
         =  ? ->id : null;

        return 
            ->schema([
                Forms\Components\Section::make('Informations de la distribution')
                    ->schema([
                        Forms\Components\Select::make('contest_id')
                            ->label('Concours')
                            ->options(function () {
                                // Récupérer tous les concours avec un marqueur pour les actifs
                                return Contest::all()->mapWithKeys(function () {
                                     = ->name;
                                    if (->status === 'active') {
                                         .= ' [ACTIF]';
                                    }
                                    return [->id => ];
                                });
                            })
                            ->searchable()
                            ->required()
                            ->default() // Définir le concours le plus récent par défaut
                            ->reactive() // Rendre le champ réactif
                            ->afterStateUpdated(function (Forms\Get , Forms\Set , ?string ) {
                                // Mettre à jour les dates en fonction du concours sélectionné
                                if () {
                                     = Contest::find();
                                    if () {
                                        ('start_date', ->start_date);
                                        ('end_date', ->end_date);
                                    }
                                }
                            })
                            ->createOptionForm([
                                Forms\Components\TextInput::make('name')
                                    ->label('Nom du concours')
                                    ->required(),
                                Forms\Components\Select::make('status')
                                    ->label('Statut')
                                    ->options([
                                        'active' => 'Actif',
                                        'scheduled' => 'Planifié',
                                        'completed' => 'Terminé',
                                        'cancelled' => 'Annulé',
                                    ])
                                    ->default('active')
                                    ->required(),
                                Forms\Components\DatePicker::make('start_date')
                                    ->label('Date de début')
                                    ->required(),
                                Forms\Components\DatePicker::make('end_date')
                                    ->label('Date de fin')
                                    ->required()
                                    ->afterOrEqual('start_date'),
                            ])
                            ->createOptionAction(function () {
                                return ->label('Créer un nouveau concours');
                            }),
                            
                        Forms\Components\Select::make('prize_id')
                            ->label('Prix')
                            ->options(Prize::all()->pluck('name', 'id'))
                            ->searchable()
                            ->required()
                            ->createOptionForm([
                                Forms\Components\TextInput::make('name')
                                    ->label('Nom du prix')
                                    ->required(),
                                Forms\Components\TextInput::make('value')
                                    ->label('Valeur')
                                    ->numeric()
                                    ->required(),
                                Forms\Components\Textarea::make('description')
                                    ->label('Description')
                                    ->rows(3),
                                Forms\Components\TextInput::make('stock')
                                    ->label('Stock initial')
                                    ->numeric()
                                    ->required()
                                    ->default(1),
                            ])
                            ->createOptionAction(function () {
                                return ->label('Créer un nouveau prix');
                            }),
                            
                        Forms\Components\Grid::make(2)
                            ->schema([
                                Forms\Components\TextInput::make('quantity')
                                    ->label('Quantité totale')
                                    ->numeric()
                                    ->required()
                                    ->default(1),
                                    
                                Forms\Components\TextInput::make('remaining')
                                    ->label('Quantité restante')
                                    ->numeric()
                                    ->helperText('Si laissé vide, sera défini automatiquement à la quantité totale'),
                            ]),
                            
                        Forms\Components\Grid::make(2)
                            ->schema([
                                Forms\Components\DateTimePicker::make('start_date')
                                    ->label('Date de début')
                                    ->required()
                                    ->default(function () use () {
                                        return  ? ->start_date : null;
                                    }),
                                    
                                Forms\Components\DateTimePicker::make('end_date')
                                    ->label('Date de fin')
                                    ->required()
                                    ->afterOrEqual('start_date')
                                    ->default(function () use () {
                                        return  ? ->end_date : null;
                                    }),
                            ]),
                    ])
                    ->columns(1),
            ]);
    }

    // Le reste du code reste inchangé...
